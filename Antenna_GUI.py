# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'antenna_gui_v1.ui'
#
# Created by: PyQt5 UI code generator 5.15.2
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.
import math
import matplotlib.pyplot as plt
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from PyQt5 import QtCore, QtWidgets, QtGui
from PyQt5.QtWidgets import (QApplication, QWidget, QPushButton, QLabel, QLineEdit, QGridLayout, QMessageBox,QFileDialog,QInputDialog,QHBoxLayout,QVBoxLayout)
from PyQt5.QtGui import QMovie ,QFont
from PyQt5.QtCore import QTime, Qt
from PyQt5.QtCore import QDate, QTimer, QThread
from PyQt5.QtMultimediaWidgets import QVideoWidget
from PyQt5.QtMultimedia import QMediaContent, QMediaPlayer
from PyQt5.QtCore import QDir, Qt, QUrl, QSize
import serial, time ,threading
import serial.tools.list_ports
from PyQt5.QtWidgets import QGraphicsScene
from pyqtgraph import PlotWidget, plot
import pyqtgraph as pg
from pyorbital.orbital import Orbital
from PyQt5.QtCore import QDate, QTime, QDateTime
import pandas as pd 
import numpy as np
import datetime
import time 
import struct
import xlsxwriter
import os
#import RPi.GPIO as GPIO
import sqlite3
global sadfflag,satdf,ATST,ser,imx,imy,connect_flag,satpointcount,pingcount,msg2flag,adduser_flag,endnum,scatflag
satdf=0
sadfflag=False
adduser_flag=0
scatflag=False
endnum=0
msg2flag=False
satpointcount=0
ATST=0
length=-1
satlength=-1
ser=-1
imx=0
imy=0
pingcount=0
sattrackflag=False 
connect_flag=1
df = ""
flag = False
#db = sqlite3.connect('/home/pi/Desktop/exe/antenna_db')
#db = sqlite3.connect('F:/Graduation project/exe/antenna_db')
db = sqlite3.connect('F:/Graduation project/exe/antenna_DB (1)')
mycursor = db.cursor()
global check
check =0
DATETIME = QDateTime.currentDateTime()
#print(DATETIME.toString())
class LoginForm(QWidget):
          def __init__(self):

                    super().__init__()
                    self.setWindowTitle('Login Form')
                    self.resize(500, 150)

                    layout = QGridLayout()

                    label_name = QLabel('<font size="4"> Username </font>')
                    self.lineEdit_username = QLineEdit()
                    self.lineEdit_username.setPlaceholderText('Please enter your username')
                    layout.addWidget(label_name, 0,0)
                    layout.addWidget(self.lineEdit_username, 0, 1)

                    label_password = QLabel('<font size="4"> Password </font>')
                    self.lineEdit_password = QLineEdit()
                    self.lineEdit_password.setPlaceholderText('Please enter your password')
                    self.lineEdit_password.setEchoMode(QLineEdit.Password)
                    layout.addWidget(label_password,1, 0)
                    layout.addWidget(self.lineEdit_password, 1, 1)


                    button_login = QPushButton('Login')
                    button_login.clicked.connect(self.check_password)
                    layout.addWidget(button_login, 2, 0, 1, 2)
                    layout.setRowMinimumHeight(2, 20)
                    self.label_adduser = QtWidgets.QLabel(self)
                    self.label_adduser.setGeometry(QtCore.QRect(30, 85, 120, 20))
                    self.label_adduser.setObjectName("label")
                    self.label_adduser.setText(("Add New User"))
                    self.radioButton_adduser = QtWidgets.QRadioButton(self)
                    self.radioButton_adduser.setGeometry(QtCore.QRect(10, 85, 20, 20))
                    self.radioButton_adduser.toggled.connect(self.adduser)
                    self.label_newusername = QLabel('<font size="4"> NEW_username </font>')
                    self.label_newusername.hide()
                    
                    self.lineEdit_newusername = QLineEdit()
                    self.lineEdit_newusername.setPlaceholderText('Please enter new username')
                    layout.addWidget(self.label_newusername, 4, 0)
                    self.lineEdit_newusername.hide()
                    layout.addWidget(self.lineEdit_newusername, 4, 1)

                    
                    self.label_newpassword = QLabel('<font size="4"> NEW_Password </font>')
                    self.label_newpassword.hide()
                    self.lineEdit_newpassword = QLineEdit(self)
                    self.lineEdit_newpassword.setPlaceholderText('Please enter new password')
                    self.lineEdit_newpassword.setEchoMode(QLineEdit.Password)
                    layout.addWidget(self.label_newpassword, 5, 0)
                    layout.addWidget(self.lineEdit_newpassword, 5, 1)
                    self.lineEdit_newpassword.hide()
                    
                    self.button_insert = QPushButton('insert')
                    self.button_insert.clicked.connect(self.new_register)
                    layout.addWidget(self.button_insert, 7, 0, 1, 2)
                    layout.setRowMinimumHeight(2, 90)
                    self.button_insert.hide()
                    self.setLayout(layout)
                    
                
          def check_password(self):
                    global check
                    global adduser_flag
                    msg = QMessageBox()
                    test_username =self.lineEdit_username.text()
                    test_pass=self.lineEdit_password.text()
                    mycursor.execute("SELECT USER_ID FROM USER WHERE (USERNAME ,PASSWORD)  = (?,?) " ,(test_username,test_pass,)) 
                    ID = mycursor.fetchall()
                    if len(ID)==0:
                        msg.setText('Invalid Username OR Password ,Please TRY AGAIN ')
                        msg.exec_()
                        #app.quit()
                    else:
                      for row in ID:
                        user_id = row[0]
                      print(user_id)
                      mycursor.execute("INSERT INTO USER_Login ( USER_ID ,USERNAME, Login_Time) VALUES (?,?, ?)" ,(user_id,test_username, DATETIME.toString()))
                      db.commit()
                      msg.setText('You login sucessfully! Welcome To Antenna_Control_System ')
                      msg.exec_()
                      check=1
                      if adduser_flag==0:
                          MainWindow.showMaximized()
                          LoginForm.close(self)
                      #app.quit()
          def adduser(self):
              global adduser_flag
              adduser_flag=1
              self.label_newusername.show()
              self.lineEdit_newusername.show()
              self.label_newpassword.show()
              self.lineEdit_newpassword.show()
              self.button_insert.show()

          def new_register(self):
                    global check
                    global adduser_flag
                    msg = QMessageBox()
                    get_user = self.lineEdit_newusername.text()
                    get_pass = self.lineEdit_newpassword.text()
                    if check ==1:
                           mycursor.execute("INSERT INTO USER (USERNAME, PASSWORD) VALUES (?, ?)" ,(get_user,get_pass))
                           db.commit()
                           msg.setText('New User Inserted') 
                           msg.exec_()
                           adduser_flag=0
                    else:
                         msg.setText('SORRY !! You Cannot Insert New User until You Login sucessfully')
                         msg.exec_()
class predictForm(QWidget):
        def __init__(self):
                super().__init__()
                self.setWindowTitle('predict Form')
                self.resize(500, 220)
                self.setStyleSheet("background-color: dimgray;")
                #############################################################
                self.satnamefield = QLineEdit(self)
                self.satnamefield.setGeometry(QtCore.QRect(110, 10, 270, 25))
                self.satnamefield.setObjectName("goazimuthfield")
                self.satnamefield.setPlaceholderText('enter satellite name')
                self.satnamefield.setStyleSheet("background-color : white")
                self.label = QtWidgets.QLabel(self)
                self.label.setGeometry(QtCore.QRect(5, 10, 100, 30))
                self.label.setObjectName("label_24")
                self.label.setText("satellite name")
                self.label.setFont(QFont('Times',10,QFont.Bold))
                #############################################################
                self.yearfield = QLineEdit(self)
                self.yearfield.setGeometry(QtCore.QRect(50, 40, 80, 25))
                self.yearfield.setObjectName("goazimuthfield")
                self.yearfield.setPlaceholderText('start year')
                self.yearfield.setStyleSheet("background-color : white") 
                self.label_1 = QtWidgets.QLabel(self)
                self.label_1.setGeometry(QtCore.QRect(5, 40, 25, 20))
                self.label_1.setObjectName("label_24")
                self.label_1.setText("Year")
                self.label_1.setFont(QFont('Times',10,QFont.Bold))
                #############################################################
                self.monthfield = QLineEdit(self)
                self.monthfield.setGeometry(QtCore.QRect(210, 40, 80, 25))
                self.monthfield.setObjectName("goazimuthfield")
                self.monthfield.setPlaceholderText('start month')
                self.monthfield.setStyleSheet("background-color : white")
                self.label_2 = QtWidgets.QLabel(self)
                self.label_2.setGeometry(QtCore.QRect(150, 40, 45, 20))
                self.label_2.setObjectName("label_24")
                self.label_2.setText("Month")
                self.label_2.setFont(QFont('Times',10,QFont.Bold))
                #############################################################
                self.dayfield = QLineEdit(self)
                self.dayfield.setGeometry(QtCore.QRect(370, 40, 80, 25))
                self.dayfield.setObjectName("goazimuthfield")
                self.dayfield.setPlaceholderText('start day')
                self.dayfield.setStyleSheet("background-color : white")
                self.label_3 = QtWidgets.QLabel(self)
                self.label_3.setGeometry(QtCore.QRect(310, 40, 35, 20))
                self.label_3.setObjectName("label_24")
                self.label_3.setText("Day")
                self.label_3.setFont(QFont('Times',10,QFont.Bold))
                #############################################################
                self.hourfield = QLineEdit(self)
                self.hourfield.setGeometry(QtCore.QRect(50, 70, 80, 25))
                self.hourfield.setObjectName("goazimuthfield")
                self.hourfield.setPlaceholderText('start hour')
                self.hourfield.setStyleSheet("background-color : white")
                self.label_4 = QtWidgets.QLabel(self)
                self.label_4.setGeometry(QtCore.QRect(5, 70, 35, 20))
                self.label_4.setObjectName("label_24")
                self.label_4.setText("Hour")
                self.label_4.setFont(QFont('Times',10,QFont.Bold))
                #############################################################
                self.minutefield = QLineEdit(self)
                self.minutefield.setGeometry(QtCore.QRect(210, 70, 80, 25))
                self.minutefield.setObjectName("goazimuthfield")
                self.minutefield.setPlaceholderText('start minute')
                self.minutefield.setStyleSheet("background-color : white")
                self.label_5 = QtWidgets.QLabel(self)
                self.label_5.setGeometry(QtCore.QRect(150, 70, 45, 20))
                self.label_5.setObjectName("label_24")
                self.label_5.setText("Minute")
                self.label_5.setFont(QFont('Times',10,QFont.Bold))
                #############################################################
                self.secondfield = QLineEdit(self)
                self.secondfield.setGeometry(QtCore.QRect(370, 70, 80, 25))
                self.secondfield.setObjectName("goazimuthfield")
                self.secondfield.setPlaceholderText('start second')
                self.secondfield.setStyleSheet("background-color : white")
                self.label_6 = QtWidgets.QLabel(self)
                self.label_6.setGeometry(QtCore.QRect(310, 70, 45, 20))
                self.label_6.setObjectName("label_24")
                self.label_6.setText("Second")
                self.label_6.setFont(QFont('Times',10,QFont.Bold))
                #############################################################
                self.yearendfield = QLineEdit(self)
                self.yearendfield.setGeometry(QtCore.QRect(50, 100, 80, 25))
                self.yearendfield.setObjectName("goazimuthfield")
                self.yearendfield.setPlaceholderText('end year')
                self.yearendfield.setStyleSheet("background-color : white")
                self.label_7 = QtWidgets.QLabel(self)
                self.label_7.setGeometry(QtCore.QRect(5, 100, 25, 20))
                self.label_7.setObjectName("label_24")
                self.label_7.setText("Year")
                self.label_7.setFont(QFont('Times',10,QFont.Bold))
                #############################################################
                self.monthendfield = QLineEdit(self)
                self.monthendfield.setGeometry(QtCore.QRect(210, 100, 80, 25))
                self.monthendfield.setObjectName("goazimuthfield")
                self.monthendfield.setPlaceholderText('end month')
                self.monthendfield.setStyleSheet("background-color : white")
                self.label_8 = QtWidgets.QLabel(self)
                self.label_8.setGeometry(QtCore.QRect(150, 100, 45, 20))
                self.label_8.setObjectName("label_24")
                self.label_8.setText("Month")
                self.label_8.setFont(QFont('Times',10,QFont.Bold))
                #############################################################
                self.dayendfield = QLineEdit(self)
                self.dayendfield.setGeometry(QtCore.QRect(370, 100, 80, 25))
                self.dayendfield.setObjectName("goazimuthfield")
                self.dayendfield.setPlaceholderText('end day')
                self.dayendfield.setStyleSheet("background-color : white")
                self.label_8 = QtWidgets.QLabel(self)
                self.label_8.setGeometry(QtCore.QRect(310, 100, 35, 20))
                self.label_8.setObjectName("label_24")
                self.label_8.setText("Day")
                self.label_8.setFont(QFont('Times',10,QFont.Bold))
                #############################################################
                self.hourendfield = QLineEdit(self)
                self.hourendfield.setGeometry(QtCore.QRect(50, 130, 80, 25))
                self.hourendfield.setObjectName("goazimuthfield")
                self.hourendfield.setPlaceholderText('end hour')
                self.hourendfield.setStyleSheet("background-color : white")
                self.label_10 = QtWidgets.QLabel(self)
                self.label_10.setGeometry(QtCore.QRect(5, 130, 45, 20))
                self.label_10.setObjectName("label_24")
                self.label_10.setText("Hour")
                self.label_10.setFont(QFont('Times',10,QFont.Bold))
                #############################################################
                self.minuteendfield = QLineEdit(self)
                self.minuteendfield.setGeometry(QtCore.QRect(210, 130, 80, 25))
                self.minuteendfield.setObjectName("goazimuthfield")
                self.minuteendfield.setPlaceholderText('end minute')
                self.minuteendfield.setStyleSheet("background-color : white")
                self.label_11 = QtWidgets.QLabel(self)
                self.label_11.setGeometry(QtCore.QRect(150, 130, 45, 20))
                self.label_11.setObjectName("label_24")
                self.label_11.setText("Minute")
                self.label_11.setFont(QFont('Times',10,QFont.Bold))
                #############################################################
                self.secondendfield = QLineEdit(self)
                self.secondendfield.setGeometry(QtCore.QRect(370, 130, 80, 25))
                self.secondendfield.setObjectName("goazimuthfield")
                self.secondendfield.setPlaceholderText('end second')
                self.secondendfield.setStyleSheet("background-color : white")
                self.label_12 = QtWidgets.QLabel(self)
                self.label_12.setGeometry(QtCore.QRect(310, 130, 45, 20))
                self.label_12.setObjectName("label_24")
                self.label_12.setText("Second")
                self.label_12.setFont(QFont('Times',10,QFont.Bold))
                #############################################################
                self.stepsfield = QLineEdit(self)
                self.stepsfield.setGeometry(QtCore.QRect(210, 160, 80, 25))
                self.stepsfield.setObjectName("goazimuthfield")
                self.stepsfield.setPlaceholderText('1~86400')
                self.stepsfield.setStyleSheet("background-color : white")
                self.label_13 = QtWidgets.QLabel(self)
                self.label_13.setGeometry(QtCore.QRect(120, 160, 80, 20))
                self.label_13.setObjectName("label_24")
                self.label_13.setText("Number of steps")
                self.label_13.setFont(QFont('Times',10,QFont.Bold))
                #############################################################
                self.startpred = QtWidgets.QPushButton(self)
                self.startpred.setGeometry(QtCore.QRect(160, 190, 163, 23))
                self.startpred.setObjectName("Connect")
                self.startpred.clicked.connect(self.start_prediction)
                self.startpred.setText("Start")
        def start_prediction(self):
                global satellitename
                global syear
                global smonth
                global sday
                global shour
                global sminute
                global ssecond
                global pyear
                global pmonth
                global pday
                global phour
                global pminute
                global psecond
                global step
                satellitename=self.satnamefield.text()
                syear=self.yearfield.text()
                smonth=self.monthfield.text()
                sday=self.dayfield.text()
                shour=self.hourfield.text()
                sminute=self.minutefield.text()
                ssecond=self.secondfield.text()
                pyear=self.yearendfield.text()
                pmonth=self.monthendfield.text()
                pday=self.dayendfield.text()
                phour=self.hourendfield.text()
                pminute=self.minuteendfield.text()
                psecond=self.secondendfield.text()
                step=self.stepsfield.text()
                self.satpred=satpredictThread()
                self.satpred.start()
                pform.close()
class Ui_Dialog(QtWidgets.QWidget):
    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(1366, 700)
        Dialog.setStyleSheet("background-color: dimgray;")
        QtWidgets.QWidget.__init__(self)
        chart = Canvas(Dialog)
        chart.setGeometry(QtCore.QRect(600, 300, 773, 415))
        #chart.show()
        self.timeTimer=QtCore.QTimer(Dialog)
        self.timeTimer.setInterval(1000) #1 second
        self.timeTimer.start(1000)
        self.timeTimer.timeout.connect(self.timeValues)
        self.readTimer=QtCore.QTimer(Dialog)
        self.readTimer.timeout.connect(self.readValues)
        ##########################################################
        
        ###################connect pushbotton#####################
        self.Connect = QtWidgets.QPushButton(Dialog)
        self.Connect.setGeometry(QtCore.QRect(25, 180, 163, 35))
        self.Connect.setObjectName("Connect")
        self.Connect.clicked.connect(self.serialconnect)
        ##########################################################
        
        #################disconnect pushbotton####################
        self.Disconnect = QtWidgets.QPushButton(Dialog)
        self.Disconnect.setGeometry(QtCore.QRect(25, 220, 163, 35))
        self.Disconnect.setObjectName("Disconnect")
        self.Disconnect.clicked.connect(self.serialdisconnect)
        ##########################################################
        
        ###################Refresh pushbotton#####################
        self.Refresh = QtWidgets.QPushButton(Dialog)
        self.Refresh.setGeometry(QtCore.QRect(25, 260, 163, 35))
        self.Refresh.setObjectName("Refresh")
        self.Refresh.clicked.connect(self.serialrefresh)
        ##########################################################
        
        ########################port list#########################
        self.portmenu = QtWidgets.QComboBox(Dialog)
        self.portmenu.setGeometry(QtCore.QRect(25, 150, 82, 23))
        self.portmenu.setObjectName("portmenu")
        self.portmenu.setStyleSheet("background-color : white")
        ports = serial.tools.list_ports.comports()
        com_list =[]
        for p in ports:
                com_list.append(p.device)
        self.portmenu.addItems(com_list)
        ##########################################################
        
        #####################baudrate list########################
        self.baudmenu = QtWidgets.QComboBox(Dialog)
        self.baudmenu.setGeometry(QtCore.QRect(108, 150, 82, 23))
        self.baudmenu.setObjectName("baudmenu")
        self.baudmenu.setStyleSheet("background-color : white")
        self.baudmenu.addItems(["300", "1200", "2400","4800", "9600", "19200","38400", "57600", "74880", "115200", "230400", "250000", "500000", "1000000", "2000000"])
        ##########################################################
        
        ##################port and baudrate labels################
        self.label_24 = QtWidgets.QLabel(Dialog)
        self.label_24.setGeometry(QtCore.QRect(25, 130, 47, 20))
        self.label_24.setObjectName("label_24")
        self.label_24.setFont(QFont('Times',10,QFont.Bold))
        self.label_25 = QtWidgets.QLabel(Dialog)
        self.label_25.setGeometry(QtCore.QRect(108, 130, 60, 20))
        self.label_25.setObjectName("label_25")
        self.label_25.setFont(QFont('Times',10,QFont.Bold))
		##########################################################
        
        ##################AZ VIDEO#################################
        self.AZvideo = QVideoWidget(Dialog)
        self.AZvideo.resize(300, 280)
        self.AZvideo.move(600, 10)
        self.AZplayer = QMediaPlayer()
        self.AZplayer.setVideoOutput(self.AZvideo)
        self.AZplayer.setMedia(QMediaContent(QUrl.fromLocalFile("Capture_3.mp4")))
        #self.AZplayer.setMedia(QMediaContent(QUrl.fromLocalFile("/run/user/1000/doc/83a4071b/Capture_3.mp4")))
        #self.AZplayer.setMedia(QMediaContent(QUrl.fromLocalFile("/home/pi/Desktop/exe/Capture_3.mp4")))
        self.AZvideo.show()  
        self.AZplayer.setPosition(0) # to start at the beginning of the video every time
        self.AZplayer.play()
        self.AZplayer.pause()
        ###########################################################
        
        ##################EL VIDEO#################################
        self.ELvideo = QVideoWidget(Dialog)
        self.ELvideo.resize(300, 280)
        self.ELvideo.move(1065, 10)
        self.ELplayer = QMediaPlayer()
        self.ELplayer.setVideoOutput(self.ELvideo)
        self.ELplayer.setMedia(QMediaContent(QUrl.fromLocalFile("Capture_2.mp4")))
        #self.ELplayer.setMedia(QMediaContent(QUrl.fromLocalFile("/run/user/1000/doc/18744667/Capture_2.mp4")))
        #self.ELplayer.setMedia(QMediaContent(QUrl.fromLocalFile("/home/pi/Desktop/exe/Capture_2.mp4")))
        self.ELvideo.show()  
        self.ELplayer.setPosition(0) # to start at the beginning of the video every time
        self.ELplayer.play()
        self.ELplayer.pause()
        ###########################################################
        
        ####################current angle label####################
        self.label_3 = QtWidgets.QLabel(Dialog)
        self.label_3.setGeometry(QtCore.QRect(415, 355, 91, 16))
        self.label_3.setObjectName("label_3")
        self.label_3.setFont(QFont('Times',10,QFont.Bold))
        ###########################################################
        
        #######################go angle label######################
        self.label_6 = QtWidgets.QLabel(Dialog)
        self.label_6.setGeometry(QtCore.QRect(60, 355, 140, 16))
        self.label_6.setObjectName("label_6")
        self.label_6.setFont(QFont('Times',10,QFont.Bold))
        ###########################################################
                
        ###################Manual control label####################
        self.label_4 = QtWidgets.QLabel(Dialog)
        self.label_4.setGeometry(QtCore.QRect(68, 582,100,16))
        self.label_4.setObjectName("label_4")
        self.label_4.setFont(QFont('Times',10,QFont.Bold))
        ###########################################################
        
        ####################Error field label######################
        self.label_20 = QtWidgets.QLabel(Dialog)
        self.label_20.setGeometry(QtCore.QRect(330, 355, 80, 16))
        self.label_20.setObjectName("label_20")
        self.label_20.setFont(QFont('Times',10,QFont.Bold))
		##########################################################
        
        ####################Azimuth Error field###################
        self.azimutherrorfield = QtWidgets.QTextBrowser(Dialog)
        self.azimutherrorfield.setGeometry(QtCore.QRect(320, 380, 80, 25))
        self.azimutherrorfield.setObjectName("goazimuthfield")
        self.azimutherrorfield.setPlaceholderText('000.00')
        self.azimutherrorfield.setStyleSheet("background-color : white")
        ##########################################################
        
        ##################Elevation Error field###################
        self.elevationerrorfield = QtWidgets.QTextBrowser(Dialog)
        self.elevationerrorfield.setGeometry(QtCore.QRect(320, 410, 80, 25))
        self.elevationerrorfield.setObjectName("goelevationfield")
        self.elevationerrorfield.setPlaceholderText('000.00')
        self.elevationerrorfield.setStyleSheet("background-color : white")
        ##########################################################
        
        ##################time and date labels################
        self.label_28 = QtWidgets.QLabel(Dialog)
        self.label_28.setGeometry(QtCore.QRect(345, 5, 90, 20))
        self.label_28.setObjectName("label_28")
        self.label_28.setFont(QFont('Times',10,QFont.Bold))
        ##########################################################
        
        #######################time date field####################
        self.timeEdit = QtWidgets.QTextBrowser(Dialog)
        self.timeEdit.setGeometry(QtCore.QRect(245, 30, 150, 25))
        self.timeEdit.setObjectName("timeEdit")
        self.dateEdit = QtWidgets.QTextBrowser(Dialog)
        self.dateEdit.setGeometry(QtCore.QRect(395, 30, 150, 25))
        self.dateEdit.setObjectName("dateEdit")
        self.epochEdit = QtWidgets.QTextBrowser(Dialog)
        self.epochEdit.setGeometry(QtCore.QRect(245, 60, 300, 25))
        self.epochEdit.setObjectName("epochEdit")
        self.dateEdit.setStyleSheet("background-color : white")
        self.timeEdit.setStyleSheet("background-color : white")
        self.epochEdit.setStyleSheet("background-color : white")
        ##########################################################
        
        ################## satellite extension field #############
        self.satextention = QtWidgets.QTextBrowser(Dialog)
        self.satextention.setGeometry(QtCore.QRect(248, 125, 237, 23))
        self.satextention.setObjectName("extention")
        #self.satextention.hide()
        self.satextention.setStyleSheet("background-color : white")
        ##########################################################
        
        #################tracking angle label#####################
        self.label_29 = QtWidgets.QLabel(Dialog)
        self.label_29.setGeometry(QtCore.QRect(345, 100, 180, 21))
        self.label_29.setObjectName("label_29")
        self.label_29.setFont(QFont('Times',10,QFont.Bold))
        ##########################################################
        
        #################sat browse pushbotton ###################
        self.satbrowse = QtWidgets.QPushButton(Dialog)
        self.satbrowse.setGeometry(QtCore.QRect(490, 125, 60, 23))
        self.satbrowse.setObjectName("sat browse")
        #self.satbrowse.hide()
        self.satbrowse.clicked.connect(self.satgetfiles)
        ##########################################################
        
        ##################sat send pushbotton ####################
        self.satsend = QtWidgets.QPushButton(Dialog)
        self.satsend.setGeometry(QtCore.QRect(248, 155, 302, 23))
        self.satsend.setObjectName("sat send")
        self.satsend.clicked.connect(self.sattrack)
        ##########################################################
        
        ##################sat send pushbotton ####################
        self.satpredict = QtWidgets.QPushButton(Dialog)
        self.satpredict.setGeometry(QtCore.QRect(248, 185, 302, 23))
        self.satpredict.setObjectName("sat predict")
        self.satpredict.clicked.connect(self.sat_predict)
        ##########################################################
        
        ##################tracking type buttons###################
        self.asyncsnd = QtWidgets.QRadioButton(Dialog)
        self.asyncsnd.setGeometry(QtCore.QRect(248, 240, 35, 20))
        self.asyncsnd.toggled.connect(self.asyncsend)
        self.syncsnd = QtWidgets.QRadioButton(Dialog)
        self.syncsnd.setGeometry(QtCore.QRect(438, 240, 35, 20))
        self.syncsnd.toggled.connect(self.syncsend)
        ##########################################################
        
        #################tracking angle label#####################
        self.label_21 = QtWidgets.QLabel(Dialog)
        self.label_21.setGeometry(QtCore.QRect(275, 240, 140, 21))
        self.label_21.setObjectName("label_21")
        self.label_21.setFont(QFont('Times',10,QFont.Bold))
        self.label_22 = QtWidgets.QLabel(Dialog)
        self.label_22.setGeometry(QtCore.QRect(460, 240, 140, 21))
        self.label_22.setObjectName("label_22")
        self.label_22.setFont(QFont('Times',10,QFont.Bold))
        self.label_23 = QtWidgets.QLabel(Dialog)
        self.label_23.setGeometry(QtCore.QRect(345, 215, 170, 21))
        self.label_23.setObjectName("label_23")
        self.label_23.setFont(QFont('Times',10,QFont.Bold))
        ##########################################################
        
        #################### send pushbotton #####################
        self.sendtable= QtWidgets.QPushButton(Dialog)
        self.sendtable.setGeometry(QtCore.QRect(248, 310, 135, 23))
        self.sendtable.setObjectName("send table")
        self.sendtable.hide()
        self.sendtable.clicked.connect(self.sndpressed)
        ##########################################################
        
        ################### execute pushbotton ####################
        self.extable= QtWidgets.QPushButton(Dialog)
        self.extable.setGeometry(QtCore.QRect(415, 310, 135, 23))
        self.extable.setObjectName("execute table")
        self.extable.hide()
        self.extable.clicked.connect(self.excutetable)
        ##########################################################
        
        ################## sync send pushbotton ##################
        self.synctable= QtWidgets.QPushButton(Dialog)
        self.synctable.setGeometry(QtCore.QRect(248, 310, 302, 23))
        self.synctable.setObjectName("sync table")
        self.synctable.hide()
        self.synctable.clicked.connect(self.syncpressed)
        ##########################################################
        
        ################### angles extension field ###############
        self.extention = QtWidgets.QTextBrowser(Dialog)
        self.extention.setGeometry(QtCore.QRect(248, 275, 237, 23))
        self.extention.setObjectName("extention")
        self.extention.setStyleSheet("background-color : white")
        ##########################################################
       
        ################## browse pushbotton #####################
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setGeometry(QtCore.QRect(490, 275, 60, 23))
        self.pushButton.setObjectName("pushButton")
        self.pushButton.clicked.connect(self.getfiles)
        ##########################################################
        
        ########################gif place#########################
        self.gifview = QtWidgets.QLabel(Dialog)
        self.gifview.setGeometry(QtCore.QRect(25, 10, 220, 120))
        self.gifview.setObjectName("gifview")
        ##########################################################
        
        ##################tracking type buttons###################
        self.livetracking = QtWidgets.QRadioButton(Dialog)
        self.livetracking.setGeometry(QtCore.QRect(155, 335, 35, 20))
        self.livetracking.toggled.connect(self.live)
        self.standbytracking = QtWidgets.QRadioButton(Dialog)
        self.standbytracking.setGeometry(QtCore.QRect(35, 335, 35, 20))
        self.standbytracking.toggled.connect(self.standby)
        self.sleeptracking = QtWidgets.QRadioButton(Dialog)
        self.sleeptracking.setGeometry(QtCore.QRect(95, 335, 35, 20))
        self.sleeptracking.toggled.connect(self.sleep)
        ##########################################################
        
        ###################tracking type labels###################
        self.label_15 = QtWidgets.QLabel(Dialog)
        self.label_15.setGeometry(QtCore.QRect(72, 295, 90, 16))
        self.label_15.setObjectName("label_15")
        self.label_15.setFont(QFont('Times',10,QFont.Bold))
        self.label_16 = QtWidgets.QLabel(Dialog)
        self.label_16.setGeometry(QtCore.QRect(150, 315, 30, 16))
        self.label_16.setObjectName("label_16")
        self.label_16.setFont(QFont('Times',10,QFont.Bold))
        self.label_17 = QtWidgets.QLabel(Dialog)
        self.label_17.setGeometry(QtCore.QRect(20, 315, 60, 16))
        self.label_17.setObjectName("label_17")
        self.label_17.setFont(QFont('Times',10,QFont.Bold))
        self.label_26 = QtWidgets.QLabel(Dialog)
        self.label_26.setGeometry(QtCore.QRect(90, 315, 40, 16))
        self.label_26.setObjectName("label_26")
        self.label_26.setFont(QFont('Times',10,QFont.Bold))
        ##########################################################
               
        #####################set limit labels#####################
        self.label_27 = QtWidgets.QLabel(Dialog)
        self.label_27.setGeometry(QtCore.QRect(255, 505, 32, 25))
        self.label_27.setObjectName("label_x")
        self.label_27.setFont(QtGui.QFont('Times', 12,QFont.Bold))
        self.label_27.setStyleSheet("Background-color : green")
        self.label_27.hide()
        self.label_11 = QtWidgets.QLabel(Dialog)
        self.label_11.setGeometry(QtCore.QRect(255, 535, 135, 16))
        self.label_11.setObjectName("label_11")
        self.label_11.setFont(QtGui.QFont('Times', 12,QFont.Bold))
        self.label_11.setStyleSheet("Background-color : red")
        self.label_11.hide()
        self.label_12 = QtWidgets.QLabel(Dialog)
        self.label_12.setGeometry(QtCore.QRect(255, 565, 140, 18))
        self.label_12.setObjectName("label_12")
        self.label_12.setFont(QtGui.QFont('Times', 12,QFont.Bold))
        self.label_12.setStyleSheet("Background-color : red")
        self.label_12.hide()
        self.label_13 = QtWidgets.QLabel(Dialog)
        self.label_13.setGeometry(QtCore.QRect(255, 595, 140, 18))
        self.label_13.setObjectName("label_13")
        self.label_13.setFont(QtGui.QFont('Times', 12,QFont.Bold))
        self.label_13.setStyleSheet("Background-color : red")
        self.label_13.hide()
        self.label_14 = QtWidgets.QLabel(Dialog)
        self.label_14.setGeometry(QtCore.QRect(255, 625, 140, 18))
        self.label_14.setObjectName("label_14")
        self.label_14.setFont(QtGui.QFont('Times', 12,QFont.Bold))
        self.label_14.setStyleSheet("Background-color : red")
        self.label_14.hide()
        self.label_18 = QtWidgets.QLabel(Dialog)
        self.label_18.setGeometry(QtCore.QRect(255, 655, 140, 18))
        self.label_18.setObjectName("label_18")
        self.label_18.setFont(QtGui.QFont('Times', 12,QFont.Bold))
        self.label_18.setStyleSheet("Background-color : red")
        self.label_18.hide()
        self.label_19 = QtWidgets.QLabel(Dialog)
        self.label_19.setGeometry(QtCore.QRect(255, 685, 110, 18))
        self.label_19.setObjectName("label_19")
        self.label_19.setFont(QtGui.QFont('Times', 12,QFont.Bold))
        self.label_19.setStyleSheet("Background-color : red")
        self.label_19.hide()
        ##########################################################
        
        #####################set speed labels#####################
        self.label_9 = QtWidgets.QLabel(Dialog)
        self.label_9.setGeometry(QtCore.QRect(40, 460, 91, 16))
        self.label_9.setObjectName("label_9")
        self.label_9.setFont(QFont('Times',10,QFont.Bold))
        self.label_10 = QtWidgets.QLabel(Dialog)
        self.label_10.setGeometry(QtCore.QRect(120, 460, 91, 16))
        self.label_10.setObjectName("label_10")
        self.label_10.setFont(QFont('Times',10,QFont.Bold))
        ##########################################################
        
        #######################EL speed low#######################
        self.ELlowButton = QtWidgets.QPushButton(Dialog)
        self.ELlowButton.setGeometry(QtCore.QRect(110, 485, 70, 25))
        self.ELlowButton.setObjectName("ELLOW")
        self.ELlowButton.clicked.connect(self.AZ_LOW_click)
        ##########################################################
        
        #####################EL speed medium######################
        self.ELmediumButton = QtWidgets.QPushButton(Dialog)
        self.ELmediumButton.setGeometry(QtCore.QRect(110, 515, 70, 25))
        self.ELmediumButton.setObjectName("ELMEDIUM")
        self.ELmediumButton.clicked.connect(self.EL_MED_click)
        ##########################################################        
        
        #######################EL speed high######################
        self.ELhighButton = QtWidgets.QPushButton(Dialog)
        self.ELhighButton.setGeometry(QtCore.QRect(110, 545, 70, 25))
        self.ELhighButton.setObjectName("ELHIGH")
        self.ELhighButton.clicked.connect(self.EL_HIGH_click)
        ##########################################################        
        
        #######################AZ speed low#######################
        self.AZlowButton = QtWidgets.QPushButton(Dialog)
        self.AZlowButton.setGeometry(QtCore.QRect(30, 485, 70, 25))
        self.AZlowButton.setObjectName("LOW")
        self.AZlowButton.clicked.connect(self.AZ_LOW_click)
        ##########################################################
        
        #####################AZ speed medium######################
        self.AZmediumButton = QtWidgets.QPushButton(Dialog)
        self.AZmediumButton.setGeometry(QtCore.QRect(30, 515, 70, 25))
        self.AZmediumButton.setObjectName("medium")
        self.AZmediumButton.clicked.connect(self.AZ_MED_click)
        ##########################################################        
        
        #######################AZ speed high######################
        self.AZhighButton = QtWidgets.QPushButton(Dialog)
        self.AZhighButton.setGeometry(QtCore.QRect(30, 545, 70, 25))
        self.AZhighButton.setObjectName("HIGH")
        self.AZhighButton.clicked.connect(self.AZ_HIGH_click)
        ##########################################################
        
        ##################elevation azimuth labels################
        self.label = QtWidgets.QLabel(Dialog)
        self.label.setGeometry(QtCore.QRect(255, 380, 60, 21))
        self.label.setObjectName("label")
        self.label.setFont(QFont('Times',10,QFont.Bold))
        self.label_2 = QtWidgets.QLabel(Dialog)
        self.label_2.setGeometry(QtCore.QRect(255, 410, 60, 21))
        self.label_2.setObjectName("label_2")
        self.label_2.setFont(QFont('Times',10,QFont.Bold))
        ##########################################################

        ##################give me the azimuth angle###############
        self.ACHECKButton = QtWidgets.QPushButton(Dialog)
        self.ACHECKButton.setGeometry(QtCore.QRect(500, 380, 50, 25))
        self.ACHECKButton.setObjectName("CHECK")
        self.ACHECKButton.clicked.connect(self.azimuth_click)
        ##########################################################
        
        #################give me the elevation angle##############
        self.ECHECKButton = QtWidgets.QPushButton(Dialog)
        self.ECHECKButton.setGeometry(QtCore.QRect(500, 410, 50, 25))
        self.ECHECKButton.setObjectName("CHECK")
        self.ECHECKButton.clicked.connect(self.elevation_click)
        ##########################################################
        
        #################set origin pushbotton ###################
        self.setorigin = QtWidgets.QPushButton(Dialog)
        self.setorigin.setGeometry(QtCore.QRect(248, 445, 302, 23))
        self.setorigin.setObjectName("set origin")
        self.setorigin.clicked.connect(self.setorg)
        ##########################################################
        
        #######################Azimuth field######################
        self.azimuthfield = QtWidgets.QTextBrowser(Dialog)
        self.azimuthfield.setGeometry(QtCore.QRect(410, 380, 80, 25))
        self.azimuthfield.setObjectName("azimuthfield")
        self.azimuthfield.setPlaceholderText('000.00')
        self.azimuthfield.setStyleSheet("background-color : white")
        ##########################################################
        
        #####################Elevation field######################
        self.elevationfield = QtWidgets.QTextBrowser(Dialog)
        self.elevationfield.setGeometry(QtCore.QRect(410, 410, 80, 25))
        self.elevationfield.setObjectName("elevationfield")
        self.elevationfield.setPlaceholderText('000.00')
        self.elevationfield.setStyleSheet("background-color : white")
        ##########################################################
        
        ###################maximum attitude field####################
        self.maximumattitude = QtWidgets.QTextBrowser(Dialog)
        self.maximumattitude.setGeometry(QtCore.QRect(920, 150, 110, 25))
        self.maximumattitude.setObjectName("elevationfield")
        #self.maximumattitude.setPlaceholderText('00000.0')
        self.maximumattitude.setStyleSheet("background-color : white")
        self.label_30 = QtWidgets.QLabel(Dialog)
        self.label_30.setGeometry(QtCore.QRect(920, 125, 120, 20))
        self.label_30.setObjectName("label_30")
        self.label_30.setFont(QFont('Times',10,QFont.Bold))
        ##########################################################
        
        #####################longitude field######################
        global longitude
        self.longitude = QtWidgets.QTextBrowser(Dialog)
        self.longitude.setGeometry(QtCore.QRect(920, 90, 110, 25))
        self.longitude.setObjectName("longitude")
        #self.longitude.setPlaceholderText('0~180 E/W')
        self.longitude.setStyleSheet("background-color : white")
        self.label_31 = QtWidgets.QLabel(Dialog)
        self.label_31.setGeometry(QtCore.QRect(920, 65, 90, 20))
        self.label_31.setObjectName("label_31")
        self.label_31.setFont(QFont('Times',10,QFont.Bold))
        ##########################################################
        
        ######################latitude field######################
        self.latitude = QtWidgets.QTextBrowser(Dialog)
        self.latitude.setGeometry(QtCore.QRect(920, 30, 110, 25))
        self.latitude.setObjectName("latitude")
        #self.latitude.setPlaceholderText('0~90 N/S')
        self.latitude.setStyleSheet("background-color : white")
        self.label_32 = QtWidgets.QLabel(Dialog)
        self.label_32.setGeometry(QtCore.QRect(920, 5, 90, 20))
        self.label_32.setObjectName("label_32")
        self.label_32.setFont(QFont('Times',10,QFont.Bold))
        ##########################################################
        
        ###################elevation field########################
        self.elangle = QtWidgets.QTextBrowser(Dialog)
        self.elangle.setGeometry(QtCore.QRect(920, 210, 110, 25))
        self.elangle.setObjectName("stname")
        self.elangle.setStyleSheet("background-color : white")
        self.label_33 = QtWidgets.QLabel(Dialog)
        self.label_33.setGeometry(QtCore.QRect(920, 185, 90, 20))
        self.label_33.setObjectName("label_33")
        self.label_33.setFont(QFont('Times',10,QFont.Bold))
        ##########################################################

        ###################Azimuth field##########################
        self.azangle = QtWidgets.QTextBrowser(Dialog)
        self.azangle.setGeometry(QtCore.QRect(920, 270, 110, 25))
        self.azangle.setObjectName("stname")
        self.azangle.setStyleSheet("background-color : white")
        self.label_34 = QtWidgets.QLabel(Dialog)
        self.label_34.setGeometry(QtCore.QRect(920, 245, 90, 20))
        self.label_34.setObjectName("label_33")
        self.label_34.setFont(QFont('Times',10,QFont.Bold))
        ##########################################################
        
        ##################go to this azimuth angle################
        self.AGOButton = QtWidgets.QPushButton(Dialog)
        self.AGOButton.setGeometry(QtCore.QRect(135, 380, 50, 25))
        self.AGOButton.setObjectName("GO")
        self.AGOButton.clicked.connect(self.azimuth_go_click)
        ##########################################################
        
        #################go to this elevation angle###############
        self.EGOButton = QtWidgets.QPushButton(Dialog)
        self.EGOButton.setGeometry(QtCore.QRect(135, 410, 50, 25))
        self.EGOButton.setObjectName("GO")
        self.EGOButton.clicked.connect(self.elevation_go_click)
        ##########################################################
        
        ##################elevation azimuth labels################
        self.label_7 = QtWidgets.QLabel(Dialog)
        self.label_7.setGeometry(QtCore.QRect(5, 380, 50, 20))
        self.label_7.setObjectName("label_7")
        self.label_7.setFont(QFont('Times',9,QFont.Bold))
        self.label_8 = QtWidgets.QLabel(Dialog)
        self.label_8.setGeometry(QtCore.QRect(5, 410, 60, 20))
        self.label_8.setObjectName("label_8")
        self.label_8.setFont(QFont('Times',9,QFont.Bold))
        ##########################################################
        
        ######################Go Azimuth field####################
        self.goazimuthfield = QLineEdit(Dialog)
        self.goazimuthfield.setGeometry(QtCore.QRect(65, 380, 65, 25))
        self.goazimuthfield.setObjectName("goazimuthfield")
        self.goazimuthfield.setPlaceholderText('000.00')
        self.goazimuthfield.setStyleSheet("background-color : white")
        ##########################################################
        
        ####################Go Elevation field####################]
        self.goelevationfield = QLineEdit(Dialog)
        self.goelevationfield.setGeometry(QtCore.QRect(65, 410, 65, 25))
        self.goelevationfield.setObjectName("goelevationfield")
        self.goelevationfield.setPlaceholderText('000.00')
        self.goelevationfield.setStyleSheet("background-color : white")
        ##########################################################
        
        ######################### gif selector ###################
        self.movie = QMovie("ezgif-1-6b78570d997c.gif")
        self.gifview.setMovie(self.movie)
        self.movie.start()
        ##########################################################
        
        ###################GO DOWN BUTTON#########################
        self.DOWNButton = QtWidgets.QPushButton(Dialog)
        self.DOWNButton.setGeometry(QtCore.QRect(80, 650, 50, 40))
        self.DOWNButton.setObjectName("DOWNButton")
        self.DOWNButton.clicked.connect(self.down_click)
        ###########################################################
        
        ######################GO LEFT BUTTON#######################
        self.LEFTButton = QtWidgets.QPushButton(Dialog)
        self.LEFTButton.setGeometry(QtCore.QRect(30, 650, 50, 40))
        self.LEFTButton.setObjectName("LEFTButton")
        self.LEFTButton.clicked.connect(self.left_click)
        ###########################################################
        
        #####################GO RIGHT BUTTON#######################
        self.RIGHTButton = QtWidgets.QPushButton(Dialog)
        self.RIGHTButton.setGeometry(QtCore.QRect(130, 650, 50, 40))
        self.RIGHTButton.setObjectName("RIGHTButton")
        self.RIGHTButton.clicked.connect(self.right_click)
        ###########################################################
        
        #######################GO UP BUTTON########################
        self.UPButton = QtWidgets.QPushButton(Dialog)
        self.UPButton.setGeometry(QtCore.QRect(80, 610, 50, 40))
        self.UPButton.setObjectName("UPButton")
        self.UPButton.clicked.connect(self.up_click)	
        ###########################################################
        
        ##################stop elevation BUTTON####################
        self.ESTOPButton = QtWidgets.QPushButton(Dialog)
        self.ESTOPButton.setGeometry(QtCore.QRect(130, 610, 50, 40))
        self.ESTOPButton.setObjectName("ESTOPButton")
        self.ESTOPButton.clicked.connect(self.stop_elevation_click)	
        ###########################################################
	    
	    ###################stop azimuth BUTTON#####################
        self.ASTOPButton = QtWidgets.QPushButton(Dialog)
        self.ASTOPButton.setGeometry(QtCore.QRect(30, 610, 50, 40))
        self.ASTOPButton.setObjectName("ASTOPButton")
        self.ASTOPButton.clicked.connect(self.stop_azimuth_click)	
        ###########################################################
                
	    ################## time and date print ####################
        global Datetime
        Datetime=datetime.datetime.now()
        self.dateEdit.setText('DATE: %s/%s/%s'%(Datetime.day,Datetime.month,Datetime.year))
        self.timeEdit.setText('TIME: %s:%s:%s'%(Datetime.hour,Datetime.minute,Datetime.second))
        ###########################################################
        
        
        self.retranslateUi(Dialog)
        QtCore.QMetaObject.connectSlotsByName(Dialog)
    	
    def retranslateUi(self, Dialog):
        _translate = QtCore.QCoreApplication.translate
        Dialog.setWindowTitle(_translate("Dialog", "ANTENNA CONTROL UNIT"))
        self.DOWNButton.setText(_translate("Dialog", "↓"))
        self.LEFTButton.setText(_translate("Dialog", "←"))
        self.RIGHTButton.setText(_translate("Dialog", "→"))
        self.UPButton.setText(_translate("Dialog", "↑"))
        self.label.setText(_translate("Dialog", "Azimuth "))
        self.label_2.setText(_translate("Dialog", "Elevation"))
        self.label_3.setText(_translate("Dialog", "current angle "))
        self.label_4.setText(_translate("Dialog", "Manual control "))
        self.label_6.setText(_translate("Dialog", "Automatic setpoint"))
        self.label_7.setText(_translate("Dialog", "Azimuth "))
        self.label_8.setText(_translate("Dialog", "Elevation"))
        self.label_9.setText(_translate("Dialog", "AZ_SPEED"))
        self.label_10.setText(_translate("Dialog", "EL_SPEED"))
        self.label_11.setText(_translate("Dialog", "Azimuth min Limit"))
        self.label_12.setText(_translate("Dialog", "Azimuth max Limit"))
        self.label_13.setText(_translate("Dialog", "Elevation min Limit"))
        self.label_14.setText(_translate("Dialog", "Elevation max Limit"))
        self.label_15.setText(_translate("Dialog", "Tracking type"))
        self.label_16.setText(_translate("Dialog", "Live"))
        self.label_17.setText(_translate("Dialog", "Stand By"))
        self.label_18.setText(_translate("Dialog", "Temperture ERROR"))
        self.label_19.setText(_translate("Dialog", "Current ERROR"))
        self.label_20.setText(_translate("Dialog", "Angle Error"))
        self.label_21.setText(_translate("Dialog", "Asynchronous Mode"))
        self.label_22.setText(_translate("Dialog", "Synchronous Mode"))
        self.label_23.setText(_translate("Dialog", "Antenna Angles Table"))
        self.label_24.setText(_translate("Dialog", "Port"))
        self.label_25.setText(_translate("Dialog", "Baudrate"))
        self.label_26.setText(_translate("Dialog", "Sleep"))
        self.label_27.setText(_translate("Dialog", "Ping "))
        self.label_28.setText(_translate("Dialog", "Time and Date "))
        self.label_29.setText(_translate("Dialog", "Satellite Tracking Table"))
        self.label_30.setText(_translate("Dialog", "Maximum Attitude"))
        self.label_31.setText(_translate("Dialog", "Longitude"))
        self.label_32.setText(_translate("Dialog", "Latitude"))
        self.label_33.setText(_translate("Dialog", "Elevation"))
        self.label_34.setText(_translate("Dialog", "Azimuth"))
        self.pushButton.setText(_translate("Dialog", "Browse "))
        self.AZlowButton.setText(_translate("Dialog", "LOW "))
        self.AZmediumButton.setText(_translate("Dialog", "MEDIUM "))
        self.AZhighButton.setText(_translate("Dialog", "HIGH "))
        self.ELlowButton.setText(_translate("Dialog", "LOW "))
        self.ELmediumButton.setText(_translate("Dialog", "MEDIUM "))
        self.ELhighButton.setText(_translate("Dialog", "HIGH "))
        self.sendtable.setText(_translate("Dialog", "Send"))
        self.extable.setText(_translate("Dialog", "Execute"))
        self.AGOButton.setText(_translate("Dialog", "GO"))
        self.EGOButton.setText(_translate("Dialog", "GO"))
        self.ASTOPButton.setText(_translate("Dialog", "A Stop"))
        self.ESTOPButton.setText(_translate("Dialog", "E Stop"))
        self.ACHECKButton.setText(_translate("Dialog", "check"))
        self.ECHECKButton.setText(_translate("Dialog", "check"))
        self.Connect.setText(_translate("Dialog", "Connect"))
        self.Disconnect.setText(_translate("Dialog", "Disconnect"))
        self.Refresh.setText(_translate("Dialog", "Refresh"))
        self.satbrowse.setText(_translate("Dialog", "Browse"))
        self.setorigin.setText(_translate("Dialog", "Set Origin"))
        self.satsend.setText(_translate("Dialog", "Satellite Track"))
        self.satpredict.setText(_translate("Dialog", "Satellite predict"))
        self.synctable.setText(_translate("Dialog", "send synchronously"))
        
    def azimuth_click(self,Dialog):
        global ser
        if ser!=-1:
                ser.write(b'AZ\0')
                if ser.is_open == True:
                        if ser.in_waiting:
                                eol2 = b'\n'
                                buff=""
                                leneol2 = len(eol2)
                                line2 = bytearray()
                                while True:
                                        d = ser.read(1)
                                        if d == b"\0":
                                                print (buff)
                                                self.azimuthfield.setText('%s'%(buff.replace('AZ', '')))
                                                self.AZplayer.setPosition(1000*float(str(buff.replace('AZ', ''))))
                                                self.AZplayer.play()
                                                self.AZplayer.pause()
                                                return buff
                                        else:
                                                buff += d.decode("utf-8")
													
        elif ser==-1:
                msg=QMessageBox
                msg.critical(self,"ERROR","No Devices Available Please Connect to a Device")
    def elevation_click(self,Dialog):
        global ser
        if ser!=-1:
                ser.write(b'EL\0')
                if ser.is_open == True:
                    if ser.in_waiting:
                        eol2 = b'\n'
                        buff=""
                        leneol2 = len(eol2)
                        line2 = bytearray()
                        while True:
                            d = ser.read(1)
                            if d == b"\0":    
                                    print (buff)
                                    self.elevationfield.setText('%s'%(buff.replace('EL', '')))
                                    self.ELplayer.setPosition(1000*float(str(buff.replace('EL', '')))) 
                                    self.ELplayer.play()
                                    self.ELplayer.pause()
                                    return buff
                            else:
                                     buff += d.decode("utf-8")
        elif ser==-1:
                msg=QMessageBox
                msg.critical(self,"ERROR","No Devices Available Please Connect to a Device")
    def readValues(self):
            global ser
            global flag
            if ser!=-1:
                    if flag==False:
                            log=b'AZ EL\0'
                    elif flag==True:
                            log=b'AZ EL EA EE\0'
                    ser.write(log)
                    print (log)
                    if ser.is_open == True:
                            if ser.in_waiting:
                                    eol = b'\n'
                                    leneol = len(eol)
                                    line = bytearray()
                                    buff=""
                                    count=0
                                    while True:
                                        c = ser.read(1)
                                        if c == b'\0':    
                                                print (buff)
                                                if count==18:
                                                        S1=buff[:9]
                                                        self.azimuthfield.setText('%s'%(S1.replace('AZ', '')))
                                                        S2=buff[9:]                     
                                                        self.elevationfield.setText('%s'%(S2.replace('EL', '')))
                                                        z=S1.replace('AZ','')
                                                        t=S2.replace('EL','')
                                                        try:
                                                            self.AZplayer.setPosition(1000*float(z))
                                                        except ValueError:
                                                            pass
                                                        self.AZplayer.play()
                                                        try:
                                                            self.ELplayer.setPosition(1000*float(t))
                                                        except ValueError:
                                                            pass
                                                        self.ELplayer.play()
                                                        self.label_11.hide()
                                                        self.label_12.hide()
                                                        self.label_13.hide()
                                                        self.label_14.hide()
                                                        self.label_18.hide()
                                                elif count ==21:
                                                        S1=buff[:9]
                                                        self.azimuthfield.setText('%s'%(S1.replace('AZ', '')))
                                                        S2=buff[9:17]
                                                        self.elevationfield.setText('%s'%(S2.replace('EL', '')))
                                                        S3=buff[18:21]
                                                        z=S1.replace('AZ','')
                                                        t=S2.replace('EL','')
                                                        self.AZplayer.setPosition(1000*float(z)) 
                                                        self.AZplayer.play()
                                                        #self.AZplayer.pause()
                                                        self.ELplayer.setPosition(1000*float(t)) 
                                                        self.ELplayer.play()
                                                        #self.ELplayer.pause()
                                                        if S3== 'AL0':
                                                                self.label_11.show()
                                                        elif S3== 'AL1':
                                                                self.label_12.show()
                                                        elif S3== 'AL2':
                                                                self.label_13.show()
                                                        elif S3== 'AL3':
                                                                self.label_14.show()
                                                        elif S3== 'AL4':
                                                                self.label_18.show()
                                                elif count ==26:
                                                        S1=buff[:9]
                                                        self.azimuthfield.setText('%s'%(S1.replace('AZ', '')))
                                                        S2=buff[9:17]
                                                        self.elevationfield.setText('%s'%(S2.replace('EL', '')))
                                                        S3=buff[18:21]
                                                        S4=buff[22:25]
                                                        z=S1.replace('AZ','')
                                                        t=S2.replace('EL','')
                                                        self.AZplayer.setPosition(1000*float(z)) 
                                                        self.AZplayer.play()
                                                        self.ELplayer.setPosition(1000*float(t)) 
                                                        self.ELplayer.play()
                                                        if S3== 'AL0':
                                                                self.label_11.show()
                                                        elif S3== 'AL1':
                                                                self.label_12.show()
                                                        elif S3== 'AL2':
                                                                self.label_13.show()
                                                        elif S3== 'AL3':
                                                                self.label_14.show()
                                                        elif S3== 'AL4':
                                                                self.label_18.show()
                                                        if S4== 'AL0':
                                                                self.label_11.show()
                                                        elif S4== 'AL1':
                                                                self.label_12.show()
                                                        elif S4== 'AL2':
                                                                self.label_13.show()
                                                        elif S4== 'AL3':
                                                                self.label_14.show()
                                                        elif S4== 'AL4':
                                                                self.label_18.show()
                                                elif count ==30:
                                                        S1=buff[:9]
                                                        self.azimuthfield.setText('%s'%(S1.replace('AZ', '')))
                                                        S2=buff[9:17]
                                                        self.elevationfield.setText('%s'%(S2.replace('EL', '')))
                                                        S3=buff[18:21]
                                                        S4=buff[22:25]
                                                        S5=buff[26:]
                                                        z=S1.replace('AZ','')
                                                        t=S2.replace('EL','')
                                                        self.AZplayer.setPosition(1000*float(z)) 
                                                        self.AZplayer.play()
                                                        self.ELplayer.setPosition(1000*float(t)) 
                                                        self.ELplayer.play()
                                                        if S3== 'AL0':
                                                                self.label_11.show()
                                                        elif S3== 'AL1':
                                                                self.label_12.show()
                                                        elif S3== 'AL2':
                                                                self.label_13.show()
                                                        elif S3== 'AL3':
                                                                self.label_14.show()
                                                        elif S3== 'AL4':
                                                                self.label_18.show()
                                                        if S4== 'AL0':
                                                                self.label_11.show()
                                                        elif S4== 'AL1':
                                                                self.label_12.show()
                                                        elif S4== 'AL2':
                                                                self.label_13.show()
                                                        elif S4== 'AL3':
                                                                self.label_14.show()
                                                        elif S4== 'AL4':
                                                                self.label_18.show()
                                                        if S5== 'AL0':
                                                                self.label_11.show()
                                                        elif S5== 'AL1':
                                                                self.label_12.show()
                                                        elif S5== 'AL2':
                                                                self.label_13.show()
                                                        elif S5== 'AL3':
                                                                self.label_14.show()
                                                        elif S5== 'AL4':
                                                                self.label_18.show()
                                                elif count==34:
                                                        S1=buff[:9]
                                                        self.azimuthfield.setText('%s'%(S1.replace('AZ', '')))
                                                        S2=buff[9:17]
                                                        self.elevationfield.setText('%s'%(S2.replace('EL', '')))
                                                        S3=buff[18:26]
                                                        self.azimutherrorfield.setText('%s'%(S3.replace('AZ', '')))
                                                        S4=buff[26:34]
                                                        self.elevationerrorfield.setText('%s'%(S4.replace('EL', '')))
                                                        z=S1.replace('AZ','')
                                                        t=S2.replace('EL','')
                                                        self.AZplayer.setPosition(1000*float(z))
                                                        self.AZplayer.play()
                                                        self.AZplayer.pause()
                                                        self.ELplayer.setPosition(1000*float(t))
                                                        self.ELplayer.play()
                                                        self.ELplayer.pause()
                                                elif count==38:
                                                        S1=buff[:9]
                                                        self.azimuthfield.setText('%s'%(S1.replace('AZ', '')))
                                                        S2=buff[9:17]
                                                        self.elevationfield.setText('%s'%(S2.replace('EL', '')))
                                                        S3=buff[18:26]
                                                        self.azimutherrorfield.setText('%s'%(S3.replace('AZ', '')))
                                                        S4=buff[26:34]
                                                        self.elevationerrorfield.setText('%s'%(S4.replace('EL', '')))
                                                        S5=buff[35:]
                                                        z=S1.replace('AZ','')
                                                        t=S2.replace('EL','')
                                                        self.AZplayer.setPosition(1000*float(z))
                                                        self.AZplayer.play()
                                                        self.AZplayer.pause()
                                                        self.ELplayer.setPosition(1000*float(t))
                                                        self.ELplayer.play()
                                                        self.ELplayer.pause()
                                                        if S5== 'AL0':
                                                                self.label_11.show()
                                                        elif S5== 'AL1':
                                                                self.label_12.show()
                                                        elif S5== 'AL2':
                                                                self.label_13.show()
                                                        elif S5== 'AL3':
                                                                self.label_14.show()
                                                        elif S5== 'AL4':
                                                                self.label_18.show()
                                                        elif S5== 'AL6':
                                                                flag=False
                                                elif count==42:
                                                        S1=buff[:9]
                                                        self.azimuthfield.setText('%s'%(S1.replace('AZ', '')))
                                                        S2=buff[9:17]
                                                        self.elevationfield.setText('%s'%(S2.replace('EL', '')))
                                                        S3=buff[18:26]
                                                        self.azimutherrorfield.setText('%s'%(S3.replace('AZ', '')))
                                                        S4=buff[26:34]
                                                        self.elevationerrorfield.setText('%s'%(S4.replace('EL', '')))
                                                        S5=buff[35:38]
                                                        S6=buff[39:]
                                                        z=S1.replace('AZ','')
                                                        t=S2.replace('EL','')
                                                        self.AZplayer.setPosition(1000*float(z))
                                                        self.AZplayer.play()
                                                        self.AZplayer.pause()
                                                        self.ELplayer.setPosition(1000*float(t))
                                                        self.ELplayer.play()
                                                        self.ELplayer.pause()
                                                        if S5== 'AL0':
                                                                self.label_11.show()
                                                        elif S5== 'AL1':
                                                                self.label_12.show()
                                                        elif S5== 'AL2':
                                                                self.label_13.show()
                                                        elif S5== 'AL3':
                                                                self.label_14.show()
                                                        elif S5== 'AL4':
                                                                self.label_18.show()
                                                        elif S5== 'AL6':
                                                                flag=False
                                                        if S6== 'AL0':
                                                                self.label_11.show()
                                                        elif S6== 'AL1':
                                                                self.label_12.show()
                                                        elif S6== 'AL2':
                                                                self.label_13.show()
                                                        elif S6== 'AL3':
                                                                self.label_14.show()
                                                        elif S6== 'AL4':
                                                                self.label_18.show()
                                                        elif S6== 'AL6':
                                                                flag=False
                                                elif count==46:
                                                        S1=buff[:9]
                                                        self.azimuthfield.setText('%s'%(S1.replace('AZ', '')))
                                                        S2=buff[9:17]
                                                        self.elevationfield.setText('%s'%(S2.replace('EL', '')))
                                                        S3=buff[18:26]
                                                        self.azimutherrorfield.setText('%s'%(S3.replace('AZ', '')))
                                                        S4=buff[26:34]
                                                        self.elevationerrorfield.setText('%s'%(S4.replace('EL', '')))
                                                        S5=buff[35:38]
                                                        S6=buff[39:42]
                                                        S7=buff[43:]
                                                        z=S1.replace('AZ','')
                                                        t=S2.replace('EL','')
                                                        self.AZplayer.setPosition(1000*float(z))
                                                        self.AZplayer.play()
                                                        self.AZplayer.pause()
                                                        self.ELplayer.setPosition(1000*float(t))
                                                        self.ELplayer.play()
                                                        self.ELplayer.pause()
                                                        if S5== 'AL0':
                                                                self.label_11.show()
                                                        elif S5== 'AL1':
                                                                self.label_12.show()
                                                        elif S5== 'AL2':
                                                                self.label_13.show()
                                                        elif S5== 'AL3':
                                                                self.label_14.show()
                                                        elif S5== 'AL4':
                                                                self.label_18.show()
                                                        elif S5== 'AL6':
                                                                flag=False
                                                        if S6== 'AL0':
                                                                self.label_11.show()
                                                        elif S6== 'AL1':
                                                                self.label_12.show()
                                                        elif S6== 'AL2':
                                                                self.label_13.show()
                                                        elif S6== 'AL3':
                                                                self.label_14.show()
                                                        elif S6== 'AL4':
                                                                self.label_18.show()
                                                        elif S6== 'AL6':
                                                                flag=False
                                                        if S7== 'AL0':
                                                                self.label_11.show()
                                                        elif S7== 'AL1':
                                                                self.label_12.show()
                                                        elif S7== 'AL2':
                                                                self.label_13.show()
                                                        elif S7== 'AL3':
                                                                self.label_14.show()
                                                        elif S7== 'AL4':
                                                                self.label_18.show()
                                                        elif S7== 'AL6':
                                                                flag=False
                                                return buff
                                        else:
                                                buff += c.decode("utf-8")
                                                count+=1
            elif ser==-1:
                    msg=QMessageBox
                    msg.critical(self,"ERROR","No Devices Available Please Connect to a Device")
    def up_click(self,Dialog):
        global ser
        if ser!=-1:
                ser.write(b'MU\0')
                print("UP")
        elif ser==-1:
                msg=QMessageBox
                msg.critical(self,"ERROR","No Devices Available Please Connect to a Device")
    def down_click(self,Dialog):
        global ser
        if ser!=-1:
                ser.write(b'MD\0')
        elif ser==-1:
                msg=QMessageBox
                msg.critical(self,"ERROR","No Devices Available Please Connect to a Device")
    def right_click(self,Dialog):
        global ser
        if ser!=-1:
                ser.write(b'MR\0')
        elif ser==-1:
                msg=QMessageBox
                msg.critical(self,"ERROR","No Devices Available Please Connect to a Device")
    def left_click(self,Dialog):
        global ser
        if ser!=-1:
                ser.write(b'ML\0')
        elif ser==-1:
                msg=QMessageBox
                msg.critical(self,"ERROR","No Devices Available Please Connect to a Device")
    def stop_azimuth_click(self,Dialog):
        global ser
        if ser!=-1:
                ser.write(b'SA\0')
        elif ser==-1:
                msg=QMessageBox
                msg.critical(self,"ERROR","No Devices Available Please Connect to a Device")
    def stop_elevation_click(self,Dialog):
        global ser
        if ser!=-1:
                ser.write(b'SE\0')
        elif ser==-1:
                msg=QMessageBox
                msg.critical(self,"ERROR","No Devices Available Please Connect to a Device")
    def AZ_LOW_click(self, Dialog):
        global ser
        if ser!=-1:
                ser.write(b'VA0\0')
        elif ser==-1:
                msg=QMessageBox
                msg.critical(self,"ERROR","No Devices Available Please Connect to a Device")
    def AZ_MED_click(self, Dialog):
        global ser
        if ser!=-1:
                ser.write(b'VA1\0')
        elif ser==-1:
                msg=QMessageBox
                msg.critical(self,"ERROR","No Devices Available Please Connect to a Device")	
    def AZ_HIGH_click(self, Dialog):
        global ser
        if ser!=-1:
                ser.write(b'VA2\0')
        elif ser==-1:
                msg=QMessageBox
                msg.critical(self,"ERROR","No Devices Available Please Connect to a Device")
    def EL_LOW_click(self, Dialog):
        global ser
        if ser!=-1:
                ser.write(b'VE0\0')
        elif ser==-1:
                msg=QMessageBox
                msg.critical(self,"ERROR","No Devices Available Please Connect to a Device")
    def EL_MED_click(self, Dialog):
        global ser
        if ser!=-1:
                ser.write(b'VE1\0')
                print ("medium speed")
        elif ser==-1:
                msg=QMessageBox
                msg.critical(self,"ERROR","No Devices Available Please Connect to a Device")	
    def EL_HIGH_click(self, Dialog):
        global ser
        if ser!=-1:
                ser.write(b'VE2\0')
        elif ser==-1:
                msg=QMessageBox
                msg.critical(self,"ERROR","No Devices Available Please Connect to a Device")
    def excutetable(self, Dialog):
        global ser
        global flag
        if ser!=-1:
                ser.write(b'TE\0')
        elif ser==-1:
                msg=QMessageBox
                msg.critical(self,"ERROR","No Devices Available Please Connect to a Device")
        flag = True
        print (flag)
    def elevation_go_click(self,Dialog):
        global ser
        ELangle=self.goelevationfield.text()
        e_string='EL'
        e_string+=str(self.goelevationfield.text())
        e_string+='\0'
        e_string=e_string.encode("utf_8")
        print(e_string)
        if ser!=-1:
                ser.write(e_string)
        elif ser==-1:
                msg=QMessageBox
                msg.critical(self,"ERROR","No Devices Available Please Connect to a Device")
    def azimuth_go_click(self,Dialog):
        global ser
        AZangle=self.goazimuthfield.text()
        s_string='AZ'
        s_string+=str(self.goazimuthfield.text())
        s_string+='\0'
        s_string=s_string.encode("utf_8")
        print(s_string)
        if ser!=-1:
                ser.write(s_string)
        elif ser==-1:
                msg=QMessageBox
                msg.critical(self,"ERROR","No Devices Available Please Connect to a Device")
    def getfiles(self,Dialog):
        path,_= QFileDialog.getOpenFileName()
        global length
        global df
        if path:
            head,tail=os.path.split(path)
            self.extention.setText('%s'%(path))
            df= pd.read_excel (tail)
            length=len(df)
    def satgetfiles(self,Dialog):
        satpath,_= QFileDialog.getOpenFileName()
        global satlength,satdf,satdfflag
        if satpath:
            sathead,sattail=os.path.split(satpath)
            self.satextention.setText('%s'%(satpath))
            satdf= pd.read_excel(sattail)
            satlength=len(satdf)
            sadfflag=True
    def standby (self):
            self.readTimer.setInterval(1000) #1 second
            self.readTimer.start(1000)
            print ("standby")	
    def live (self):
            self.readTimer.setInterval(250) #0.25 second	
            self.readTimer.start(250)
            print ("live")
    def sleep (self):
            self.readTimer.stop()
            self.AZplayer.pause()
            self.ELplayer.pause()
    def timeValues(self):
            global epoch,imx,imy,img,xarr,yarr,satdf,satlength,satpointcount,sattrackflag,ATST,satplottrigger,pingcount,ser,msg2flag,endnum
            epoch=time.time()
            Datetime=datetime.datetime.now()
            self.dateEdit.setText('DATE: %s/%s/%s'%(Datetime.day,Datetime.month,Datetime.year))
            self.timeEdit.setText('TIME: %s:%s:%s'%(Datetime.hour,Datetime.minute,Datetime.second))      
            self.epochEdit.setText('Epoch Time:%u'%(epoch))	
            if sadfflag==True:
                rtarr=satdf.loc[:,"RT"]
                rtcount=rtarr.count()
                etarr=satdf.loc[:,"ET"]
                ftarr=satdf.loc[:,"FT"]
                if rtcount!=0:
                        for i in range (0,ratcount):
                            if rtarr[i]==epoch:
                                msg2 = QMessageBox()
                                msg2.setIcon(QMessageBox.Information)
                                msgstr='Satellite is in Rise Time \n'
                                msgstr+='Satellite maximum elevation time is '
                                msgstr+=str(int(etarr[0]))
                                msg2.setText(msgstr)
                                msg2.exec_()
                            if ftarr[i]==epoch:
                                msg2 = QMessageBox()
                                msg2.setIcon(QMessageBox.Information)
                                msgstr='Satellite is in fall Time \n'
                                msg2.setText(msgstr)
                                msg2.exec_()
            pingcount+=1
            if endnum!=0:
                self.maximumattitude.setText('%u'%(max(ATST)))
                self.lineditexe()                                
            if msg2flag==True:
                    msg2 = QMessageBox()
                    msg2.setIcon(QMessageBox.Information)
                    msg2.setText("prediction is completed successfully")
                    msg2.exec_()
                    satdf= pd.read_excel('predection_results.xlsx')
                    satlength=len(satdf)
                    self.sattrack()
                    msg2flag=False
            if pingcount==5:
                    pingcount=0
                    if ser!=-1:
                            self.pingtest()
    def sndpressed(self):
                if ser!=-1:
                        self.worker=AsynctableThread()
                        self.worker.start()
                elif ser==-1:
                        msg=QMessageBox
                        msg.critical(self,"ERROR","No Devices Available Please Connect to a Device")
    def serialconnect(self):
            global ser
            print (ser)
            port=self.portmenu.currentText();
            baud=self.baudmenu.currentText();
            global connect_flag
            if connect_flag!=-1:
                    ser = serial.Serial(port, baudrate=baud)
                    connect_flag=-1
                    self.pingtest()
                    timestr = 'ST'
                    Datetime = datetime.datetime.now()
                    timestr += str(Datetime.year)
                    timestr += ':'
                    timestr += str(Datetime.month)
                    timestr += ':'
                    timestr += str(Datetime.day)
                    timestr += ':'
                    timestr += str(Datetime.hour)
                    timestr += ':'
                    timestr += str(Datetime.minute)
                    timestr += ':'
                    timestr += str(Datetime.second + 1)
                    timestr += '\0'
                    print(timestr)
                    self.worker=secThread()
                    self.worker.start()
            elif connect_flag==-1:
                    msg=QMessageBox
                    msg.critical(self,"ERROR","Port Already Selected")
            
    def serialdisconnect(self):
            global ser
            global connect_flag
            ser.close()
            ser=-1
            connect_flag=0
            print (ser)
    def serialrefresh(self):
            ports = serial.tools.list_ports.comports()
            com_list =[]
            for p in ports:
                    com_list.append(p.device)
            self.portmenu.clear()
            self.portmenu.addItems(com_list)
    def asyncsend(self):
            self.sendtable.show()
            self.extable.show()
            self.synctable.hide()
    def syncsend(self):
            self.synctable.show()
            self.sendtable.hide()
            self.extable.hide()
    def syncpressed(self):
            if ser!=-1:
                    self.syncworker=synctableThread()
                    self.syncworker.start()
            elif ser==-1:
                    msg=QMessageBox
                    msg.critical(self,"ERROR","No Devices Available Please Connect to a Device")
    def sattrack(self):
            self.satworker=sattrackingThread()
            self.satworker.start()
    def sat_predict(self):
            pform.show()
    def lineditexe(self):
        global satdf,satlength,endnum,ATST
        self.longitude.setText('%s'%(str(satdf.loc[endnum,"LONG"])))
        self.latitude.setText('%s'%(str(satdf.loc[endnum,"LAT"])))
        self.elangle.setText('%s'%(str(satdf.loc[endnum,"EL"])))
        self.azangle.setText('%s'%(str(satdf.loc[endnum,"AZ"])))
        
		
    def setorg(self):
            global ser
            if ser!=-1:
                    qm = QMessageBox
                    ret=qm.question(self,'', "Are you sure you want set these angles as origin?", qm.Yes | qm.No)
                    if ret==qm.Yes:
                            ser.write(b'SO\0')
                            qm.information(self,'',"Origin Changed")
                    else:
                            qm.information(self,'',"Nothing Changed")
                            
            elif ser==-1:
                    msg=QMessageBox
                    msg.critical(self,"ERROR","No Devices Available Please Connect to a Device")
    def pingtest(self):
            global ser
            if ser!=-1:
                ser.write(b'PN\0')
                if ser.is_open == True:
                    if ser.in_waiting:
                            eol = b'\n'
                            buff=""
                            d='a'
                            leneol = len(eol)
                            line = bytearray()
                            while d != b"\0":
                                    d = ser.read(1)
                                    if d == b"\0":
                                            print (buff)                                            
                                            if buff=='PN ':
                                                    self.label_27.show()
												
                                    else:
                                            buff += d.decode("utf-8")
            elif ser==-1:
                msg=QMessageBox
                msg.critical(self,"ERROR","No Devices Available Please Connect to a Device")

    class AsynctableThread(QThread):
        def run(self):
            global length
            global df
            global ser
            st='TS'
            st+=str(length)
            st=st.encode("utf_8")
            ser.write(st)
            for i in range(0,length):
                    st2='TL'
                    st2+=str(df.loc[i,"AZ"])
                    st2+=';'
                    st2+=str(df.loc[i,"EL"])
                    st2+=';'
                    st2+=str(df.loc[i,"Time"])
                    st2+=';'
                    st2=st2.encode("utf_8")
                    ser.write(st2)
                    print (st2)
                    time.sleep(1)
class satpredictThread(QThread):
    def run(self):
            global satellitename
            global syear
            global smonth
            global sday
            global shour
            global sminute
            global ssecond
            global pyear
            global pmonth
            global pday
            global phour
            global pminute
            global psecond
            global step
            global msg2flag
            syear=int(syear)
            smonth=int(smonth)
            sday=int(sday)
            shour=int(shour)
            sminute=int(sminute)
            ssecond=int(ssecond)
            pyear=int(pyear)
            pmonth=int(pmonth)
            pday=int(pday)
            phour=int(phour)
            pminute=int(pminute)
            psecond=int(psecond)
            step=int(step)
            tstart = datetime.datetime(syear,smonth,sday,shour,sminute,ssecond).timestamp()          
            tend = datetime.datetime(pyear, pmonth,pday, phour, pminute,psecond).timestamp()          
            workbook = xlsxwriter.Workbook('predection_results.xlsx')
            worksheet = workbook.add_worksheet()
            worksheet.write(0, 0,"TIME" )
            worksheet.write(0, 1,"DATE" )
            worksheet.write(0, 2,"LONG" )
            worksheet.write(0, 3,"LAT" )
            worksheet.write(0, 4,"AT" )
            worksheet.write(0, 5,"AZ" )
            worksheet.write(0, 6,"EL" )
            worksheet.write(0, 7,"RT" )
            worksheet.write(0, 8,"FT" )
            worksheet.write(0, 9,"ET" )
            worksheet.write(0, 10,"STNAME" )
            worksheet.write(1, 10,satellitename )
            ROW=1
            xnow=datetime.datetime.utcfromtimestamp(tstart)
            orb = Orbital(satellitename)
            nextpasses=orb.get_next_passes(xnow, (phour-shour), 31.699277, 26.558100, 55.0,0.001,0)
            for i in range (0,len(nextpasses)):
                worksheet.write(i+1, 7,datetime.datetime.timestamp(nextpasses[i][0]))
                worksheet.write(i+1, 8,datetime.datetime.timestamp(nextpasses[i][1]))
                worksheet.write(i+1, 9,datetime.datetime.timestamp(nextpasses[i][2]))
            while tstart<tend:
                    lonlataltarray=orb.get_lonlatalt(datetime.datetime.utcfromtimestamp(tstart))
                    xnow=datetime.datetime.utcfromtimestamp(tstart)
                    AZEL=orb.get_observer_look(xnow,31.699277, 26.558100, 55.0)        
                    if lonlataltarray[0]<0:
                            lonvar=lonlataltarray[0]
                            lonvar*=-1
                            longstr=str(lonvar)
                            longstr+="W"
                    else:
                            longstr=str(lonlataltarray[0])
                            longstr+='E'
                    if lonlataltarray[1]<0:
                            latvar=lonlataltarray[1]
                            latvar*=-1
                            latstr=str(latvar)
                            latstr+='N'
                    else:
                            latvar=lonlataltarray[1]
                            latstr=str(latvar)
                            latstr+="S"
                    worksheet.write(ROW, 0, time.strftime('%H:%M:%S', time.localtime(tstart)))
                    worksheet.write(ROW, 1, time.strftime('%d/%m/%Y', time.localtime(tstart)))
                    worksheet.write(ROW, 2, longstr)
                    worksheet.write(ROW,3, latstr)
                    worksheet.write(ROW,4,(lonlataltarray[2]))                                      
                    worksheet.write(ROW,5,(AZEL[0]))
                    worksheet.write(ROW,6,(AZEL[1]))
                    ROW+=1
                    tstart+=step
            workbook.close()
            msg2flag=True
class synctableThread(QThread):
    def run(self):
        global length
        global df
        global ser
        global epoch
        i=0
        if length!=-1:
                while i<=length:
                        st=str(df.loc[i,"Time"])
                        if st==str(int(epoch)):
                                st2='AZ'
                                st2+=str(df.loc[i,"AZ"])
                                st2+=' '
                                st2+='EL'
                                st2+=str(df.loc[i,"EL"])
                                st2+='\0'
                                st2=st2.encode("utf_8")
                                i+=1
                                print (st2)
                                ser.write(st2)
        elif length==-1:
                pass
class sattrackingThread(QThread):
    def run(self):
        global satlength,satdf,ser,epoch,graphicsView,scene,pen,imx,imy,sattrackflag,xarr,yarr,ATST,satplottrigger,ax,Datetime,longitude,endnum
        sattrackflag=True
        satplottrigger=True
        if satlength!=-1:
                sattrackflag=True
                i=0
                xarr=np.zeros(satlength)
                yarr=np.zeros(satlength)
                ATST=np.zeros(satlength)
                for i in range (0,satlength):
                        st2=str(satdf.loc[i,"LONG"])
                        if st2.find('E')!=-1:
                                lat=st2.replace('E','')
                                imx=384*(1+(float(lat)/180))
                                xarr[i]=int(imx)
                        elif st2.find('W')!=-1:
                                lat=st2.replace('W','')
                                imx=384*(1-(float(lat)/180))
                                xarr[i]=int(imx)
                        st3=str(satdf.loc[i,"LAT"])
                        if st3.find('S')!=-1:
                                lon=st3.replace('S','')
                                imy=205*(1+(float(lon)/90))
                                yarr[i]=int(imy)
                        elif st3.find('N')!=-1:
                                lon=st3.replace('N','')
                                imy=205*(1-(float(lon)/90))
                                yarr[i]=int(imy)
                        ATST[i]=str(satdf.loc[i,"AT"])
                        #print (imx)
                        i+=1
                #plot track
                Canvas.plot(self,xarr,yarr)
                #plot sat position
                endnum=0
                while True:
                    Datetime=datetime.datetime.now()
                    for j in range (0,satlength):
                                dat=str(satdf.loc[j,"DATE"])
                                tim=str(satdf.loc[j,"TIME"])
                                hour=int(tim[0])*10+int(tim[1])
                                minute=int(tim[3])*10+int(tim[4])
                                second=int(tim[6])*10+int(tim[7])
                                day=int(dat[0])*10+int(dat[1])
                                mon=int(dat[3])*10+int(dat[4])
                                year=int(dat[6])*1000+int(dat[7])*100+int(dat[8])*10+int(dat[9])
                                if Datetime.day==day and Datetime.month==mon and Datetime.year==year:
                                        if Datetime.second==second and Datetime.minute==minute and Datetime.hour==hour:
                                                endnum=j
                                                Canvas.scatter(self,endnum,xarr,yarr)
        elif satlength==-1:
                pass

class secThread(QThread):
    def run(self):
        global ax
        while True:
            LED_PIN = 22
            #GPIO.setmode(GPIO.BOARD)
            #GPIO.setup(LED_PIN, GPIO.OUT)
            #GPIO.output(LED_PIN, GPIO.HIGH)
            #time.sleep(0.1)
            #GPIO.output(LED_PIN, GPIO.LOW)
            #time.sleep(0.9)
            #GPIO.cleanup()      

    
class Canvas(FigureCanvas):
    def __init__(self, parent):
        global satlength,ax,fig,canvas
        fig, ax = plt.subplots(figsize=(7.68, 4.1), dpi=100)
        plt.subplots_adjust(left=0.0, right=1.0, bottom=0.0, top=1.0)
        super().__init__(fig)
        self.setParent(parent)
        img = plt.imread("earth_40.jpg")
        ax.imshow(img,extent=[0, 768, 0, 410])
        plt.axis('off')
    def scatter(self,endnum,datax,datay):
        global scatflag,a
        if scatflag==True:
           a.remove()
           a=plt.scatter(datax[endnum], datay[endnum], c='red',s=88,zorder=2)
        else:
           a=plt.scatter(datax[endnum], datay[endnum], c='red',s=88,zorder=2)
           scatflag=True
        fig.canvas.draw()
        fig.canvas.flush_events()
    def plot(self,datax, datay):        
        plt.clf()
        print (datax)
        img = plt.imread("earth_40.jpg")
        plt.imshow(img,extent=[0, 768, 0, 410])
        asdval=datax[100]-datax[0]
        while True:
            if asdval>0:
                xmax =np.argmax(datax,axis=0)
                plt.plot(datax[0:xmax], datay[0:xmax], color='yellow',zorder=1)
                fig.canvas.draw()
                fig.canvas.flush_events()
                datax=datax[xmax+1:]
                datay=datay[xmax+1:]
                #print ("the length of x array is ",len(datax))
                #print ("the length of y array is ",len(datay))
                if len(datax)==0:
                    break
            elif asdval<0:
                xmin=np.argmin(datax,axis=0)
                print(xmin)
                plt.plot(datax[0:xmin], datay[0:xmin], color='yellow',zorder=1)
                fig.canvas.draw()
                fig.canvas.flush_events()
                datax=datax[xmin+1:]
                datay=datay[xmin+1:]
                #print ("the length of x array is ",len(datax))
                #print ("the length of y array is ",len(datay))
                if len(datax)==0:
                    break
if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    #form = LoginForm()
    #form.show()
    MainWindow = QtWidgets.QMainWindow()
    ui =  Ui_Dialog()
    ui.setupUi(MainWindow)
    MainWindow.showMaximized()
    #MainWindow.hide()
    pform = predictForm()
    pform.hide()
    sys.exit(app.exec_())
